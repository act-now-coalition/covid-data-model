# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: awsauth
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'


custom:
  tableName: 'can-api-keys-${self:provider.stage}'
  dotenv:
    # Lambda@Edge functions don't support environment variables. Specifying include
    # here makes sure that we're only including environment variables matching '',
    # which should be none of them.
    include:
      - ''

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-lambda-edge-pre-existing-cloudfront

provider:
  name: aws
  runtime: python3.7

  stage: ${opt:stage, 'dev'}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - "arn:aws:logs:*:*:log-group:/aws/lambda/*"
    - Effect: Allow
      Action:
        - firehose:DeleteDeliveryStream
        - firehose:PutRecord
        - firehose:PutRecordBatch
        - firehose:UpdateDestination
      Resource: '*'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["APIKeysDynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}/index/*"

    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: "arn:aws:ses:${self:provider.region}:*:identity/covidactnow.org"


# you can add packaging information here
package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt
    - end_to_end_test.py

functions:
  apiRegisterApiKeyEdge:
    handler: awsauth/auth_app.register_edge
    memorySize: 128
    timeout: 5
    events:
      - preExistingCloudFront:
          distributionId: ${env:CLOUDFRONT_DISTRIBUTION_ID}
          eventType: viewer-request
          pathPattern: 'v2/register'
          includeBody: true

  apiCheckAPIKeyEdge:
    handler: awsauth/auth_app.check_api_key_edge
    memorySize: 128
    timeout: 5
    events:
      - preExistingCloudFront:
          distributionId: ${env:CLOUDFRONT_DISTRIBUTION_ID}
          eventType: viewer-request
          pathPattern: 'v2/*'
          includeBody: false


# you can add CloudFormation resource templates here
resources:
 Resources:
  APIKeysDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.tableName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: api_key
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
        - AttributeName: welcome_email_sent_at
          AttributeType: S
        - AttributeName: is_covid_response_simulator_user
          AttributeType: B
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      GlobalSecondaryIndexes:
       - IndexName: apiKeys
         KeySchema:
         - AttributeName: api_key
           KeyType: HASH
         Projection:
           ProjectionType: ALL

  FirehoseToS3Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FirehoseToS3Role${self:provider.stage}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - firehose.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: FirehoseToS3Policy
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
              Resource: '*'
  ServerlessKinesisFirehoseBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: covidactnow-api-access-logs-${self:provider.stage}
  ServerlessKinesisFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: covidactnow-api-access-logs-${self:provider.stage}
      S3DestinationConfiguration:
        BucketARN:
          Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: ServerlessKinesisFirehoseBucket
        BufferingHints:
          IntervalInSeconds: "300"
          SizeInMBs: "5"
        CompressionFormat: "UNCOMPRESSED"
        # Prefix: "raw/"
        RoleARN: { Fn::GetAtt: [ FirehoseToS3Role, Arn ] }
